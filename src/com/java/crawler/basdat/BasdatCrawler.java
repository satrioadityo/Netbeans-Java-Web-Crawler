/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.java.crawler.basdat;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

/**
 *
 * @author satrio
 */
public class BasdatCrawler extends javax.swing.JFrame {

    private int LIMIT;                            // limiter yg akan menentukan berapa page yg akan dicrawl
    private ArrayList<String> listPageVisited;    // list page yg sudah pernah dicrawl, untuk pencegahan agar tidak terjadi crawl page yg sama berkali-kali
    private ArrayList<String> listPageToVisit;    // list page yg harus dikunjungi
    private ArrayList<String> listPreviousPageVisited;    // list page yang sudah pernah dikunjungi periode sebelumnya (dari file databse url)
    
    // menggunakan user_agent tipuan, agar browser mengenali robot sebagai browser beneran haha
    private static final String USER_AGENT =
                    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/535.1 (KHTML, like Gecko) Chrome/13.0.782.112 Safari/535.1";

    private ArrayList<String> links;      // arraylist untuk menampung link yang didapat hasil crawl
    private Document htmlDocument;        // document ini gunanya untuk mentransform web page ke document agar bisa diextract
    int numb = 0;
    
    
    /**
     * Creates new form BasdatCrawler
     */
    public BasdatCrawler() {
        initComponents();
        listPageVisited = new ArrayList<String>();
        listPageToVisit = new ArrayList<String>();
        listPreviousPageVisited = new ArrayList<String>();
        links = new ArrayList<String>();
    }

    public void openFilePathDialog(JTextField textField){
        chooser.setFileSelectionMode(chooser.FILES_AND_DIRECTORIES);
        int returnval = chooser.showOpenDialog(BasdatCrawler.this);
        if (returnval == chooser.APPROVE_OPTION){
            File file = chooser.getSelectedFile();
            try {
                if (file.isFile()){
                    textField.setText(file.getParent().toString());
                }else if (file.isDirectory()){
                    textField.setText(file.getAbsolutePath().toString());
                }
            } catch (Exception ee) {
                JOptionPane.showMessageDialog(BasdatCrawler.this, "Choose Folder First");
            }
        }
    }

    public void outputConsole(JTextArea textArea, String message){
        textArea.append(message);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        chooser = new javax.swing.JFileChooser();
        mainPane = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtURL = new javax.swing.JTextField();
        btnStartCrawl = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtFilePath = new javax.swing.JTextField();
        btnFilePath = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        txtLimit = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnDBUrlPath = new javax.swing.JButton();
        txtDBUrlPath = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtCrawlingProcess = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mainPane.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Basdat Java Web Crawler");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        txtURL.setText("http://");
        txtURL.setToolTipText("include the protocol !");

        btnStartCrawl.setText("Start Crawl");
        btnStartCrawl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartCrawlActionPerformed(evt);
            }
        });

        jLabel2.setText("Web address * :");

        jLabel3.setText("Save Crawling Result to *:");

        txtFilePath.setEditable(false);

        btnFilePath.setText("File Path");
        btnFilePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilePathActionPerformed(evt);
            }
        });

        jLabel7.setText("Limit Crawl *:");

        jLabel4.setText("Previous Crawl Data :");

        btnDBUrlPath.setText("DB URL Path");
        btnDBUrlPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDBUrlPathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnStartCrawl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel7)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnDBUrlPath)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDBUrlPath))
                            .addComponent(txtLimit)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(btnFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFilePath, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE))
                            .addComponent(txtURL, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtURL, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(btnFilePath)
                    .addComponent(txtFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtLimit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(btnDBUrlPath)
                    .addComponent(txtDBUrlPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(btnStartCrawl)
                .addContainerGap())
        );

        txtCrawlingProcess.setColumns(20);
        txtCrawlingProcess.setRows(5);
        jScrollPane1.setViewportView(txtCrawlingProcess);

        jLabel5.setText("Crawling Process");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout mainPaneLayout = new javax.swing.GroupLayout(mainPane);
        mainPane.setLayout(mainPaneLayout);
        mainPaneLayout.setHorizontalGroup(
            mainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        mainPaneLayout.setVerticalGroup(
            mainPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPaneLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFilePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilePathActionPerformed
        // get folder untuk menyimpan hasil crawling
        this.openFilePathDialog(txtFilePath);
    }//GEN-LAST:event_btnFilePathActionPerformed

    private void btnStartCrawlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartCrawlActionPerformed
        
        // ketika button start crawl di klik akan memulai crawling
        System.out.println("starting crawl");
        
        // pastikan listPageToVisit & listPageVisited dimulai dari kosong
        listPageToVisit.clear();
        listPageVisited.clear();
        listPreviousPageVisited.clear();
        
        // check user input
        if (!"".equals(txtURL.getText()) && !"".equals(txtFilePath.getText()) && !"".equals(txtLimit.getText())) {
            
            // kalo sudah pernah crawling sebelumnya, dan db urlnya diset, maka masukkan db
            if(!"".equals(txtDBUrlPath.getText())){
                // read file per line, masukkan ke listPrevious
                BufferedReader br = null;

		try {

                    String sCurrentLine;

                    br = new BufferedReader(new FileReader(txtDBUrlPath.getText()));

                    while ((sCurrentLine = br.readLine()) != null) {
                        // masukkan ke listPrevious
                        listPreviousPageVisited.add(sCurrentLine);
                    }

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
                    try {
                            if (br != null)br.close();
                    } catch (IOException ex) {
                            ex.printStackTrace();
                    }
		}
            }
            else{
                // set listPrevious menjadi 0, tanda bahwa tidak ada db url yang dimasukkan atau belum pernah crawling sebelumnya
                listPreviousPageVisited.clear();
            }
            
            
            System.err.println(listPreviousPageVisited.size()+" size listPrevious");
            // user input is valid, get value dari field
            String url = txtURL.getText();
            String filePath = txtFilePath.getText();
            int limit = 10; // set default limit
            try {
                limit = Integer.parseInt(txtLimit.getText());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(BasdatCrawler.this, "Input limitnya angka!", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
            
            // set root url to crawl // init seeding
            listPageToVisit.add(url);
            // set limit
            LIMIT = limit;
            
            // start crawling
            // proses crawl, selama belum mencapai LIMIT proses crawling akan terus berjalan
            // FIX THIS bug limit
            while(this.listPageVisited.size() < LIMIT){
                String currentUrl;
                if(listPageToVisit.size()==1){ // tanda root akan dicrawl
                    currentUrl = listPageToVisit.remove(0);
                    System.out.println("current url to crawl = " + currentUrl+"\n");
                }
                else if(listPageToVisit.size() > 0 && listPageToVisit.size()!=1){
                    currentUrl = this.getNextUrl();
                    System.out.println("current url to crawl = " + currentUrl+"\n");
                }
                else{
                    break;
                }
                
                 // proses crawling, banyak yg terjadi disini
                this.crawl(currentUrl, filePath); 

                // setelah crawling add current URL ke listPageVisited
                this.listPageVisited.add(currentUrl);

                // tambah semua link hasil crawling ke listPageToVisit jika kurang dari 1 milyar
                if(listPageToVisit.size() < 1000000000)
                    listPageToVisit.addAll(links);

                // nandain doang URL apa aja yg udah dicrawl
                for(String s : this.listPageVisited) {
                    System.out.println(s + " sudah dicrawl, yeah !");
                }
            }
            
            // sebelum proses crawling selesai, simpan list url yg sudah pernah dicrawl ke file
            try {
                File file = new File(txtFilePath.getText()+"/dbUrl.txt");

                // if file doesnt exists, then create it
                if (!file.exists()) {
                    file.createNewFile();
                }

                FileWriter fw = new FileWriter(file.getAbsoluteFile());
                BufferedWriter bw = new BufferedWriter(fw);
                for(String s : this.listPageVisited) {
                    bw.write(s+"\n");
                }
                bw.close();

                System.out.println("Done Save list URL to file");

            } catch (IOException e) {
                    e.printStackTrace();
            }
            
            // proses crawling sudah selesai, show message finished
            System.out.println("\n**Done** Visited " + this.listPageVisited.size() + " web page(s)");
            outputConsole(txtCrawlingProcess, "\n**Done** Visited " + this.listPageVisited.size() + " web page(s)");
            
        }
        else{
            JOptionPane.showMessageDialog(BasdatCrawler.this, "Lengkapi inputan", 
                    "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnStartCrawlActionPerformed

    private void btnDBUrlPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDBUrlPathActionPerformed
        // ketika sudah memiliki DB url yang sudah pernah dikunjungi, set ini !
        chooser.setFileSelectionMode(chooser.FILES_ONLY);
        int returnval = chooser.showOpenDialog(BasdatCrawler.this);
        if (returnval == chooser.APPROVE_OPTION){
            File file = chooser.getSelectedFile();
            try {
                if (file.isFile()){
                    txtDBUrlPath.setText(file.getAbsolutePath().toString());
                }
            } catch (Exception ee) {
                JOptionPane.showMessageDialog(BasdatCrawler.this, "Choose File First");
            }
        }
    }//GEN-LAST:event_btnDBUrlPathActionPerformed
    
    private String getNextUrl() {
        String nextUrl;
        if(listPreviousPageVisited.size()==0){ // belum pernah crawl sebelumnya
            do {
                // melakukan dequeue sampai link yg belum dikunjungi didapat atau melakukan dequeue selama nextUrl ada dalam listPageVisited
                nextUrl = this.listPageToVisit.remove(0);
            } while(listPageVisited.contains(nextUrl));
        }
        else{ // sudah pernah crawl sebelumnya
            do {
                // melakukan dequeue sampai link yg belum dikunjungi didapat atau melakukan dequeue selama nextUrl ada dalam listPageVisited
                nextUrl = this.listPageToVisit.remove(0);
            } while(listPageVisited.contains(nextUrl) || listPreviousPageVisited.contains(nextUrl) );
        }

        return nextUrl; // return link yang belum dikunjungi untuk dicrawl
    }
    
    public void crawl(String url, String folderFilePath) {
        try {
            // membuat koneksi ke url
            Connection connection = Jsoup.connect(url).userAgent(USER_AGENT);
            
            // mentransform page menjadi document untuk diextract nantinya
            Document htmlDocument = connection.get();
            this.htmlDocument = htmlDocument;
            
            File NewFolder = null;
            
            // 200 itu tanda kalo semua koneksi OK
            if(connection.response().statusCode() == 200) { 
                System.out.println("**Visiting "+numb+" ** Received web page at " + url);
                
                // save html ke txt
                NewFolder = new File(""+folderFilePath);
                NewFolder.mkdir();
                PrintWriter pw = new PrintWriter(NewFolder.getAbsolutePath()+"/raw_web.txt");
                
                // TODO get the url, question, {user, answer}, {next_url}
                
                // question
                Elements question = htmlDocument.select(".QuestionArea");
                for(Element el : question){
                    System.err.println("{{{" + el.text() + "}}}");
                }
                
                // user, answer
                Elements answer = htmlDocument.select(".pagedlist_item");
                int index = 1;
                for(Element el : answer){
                    if(index != 2){
                        System.err.println("{"+el.text()+"}, ");
                    }
                    else{
                        // do nothing
                    }
                    index++;
                }
                
                // get all link (next_url)
                Elements linksOnPage = htmlDocument.select("a[href]");
                System.out.println("Found (" + linksOnPage.size() + ") links");

                // untuk setiap link akan ditampung di arraylist links
                for(Element link : linksOnPage) {
                    // link yg didapat dari suatu page, difilter terlebih dahulu agar dapat page berita saja
                    if(link.absUrl("href").contains("quora.com") && link.absUrl("href").contains("-") 
                            && (!link.absUrl("href").contains("#")) && (!link.absUrl("href").contains("?")) 
                            && (!link.absUrl("href").contains(".html")) && (!link.absUrl("href").contains("{")) 
                            && (!link.absUrl("href").contains("}"))){
                        System.out.println("{"+ link.absUrl("href")+ "}");
                        this.links.add(link.absUrl("href"));
                    }
                }
                
//                pw.println(htmlDocument.html());
//                pw.close();
            }
            else{
                System.err.println("terjadi error !");
            }

            // jika page yg dibuka bukan html
            if(!connection.response().contentType().contains("text/html")) {
                // show failure message, not crawl
                System.out.println("**Failure** Retrieved something other than HTML");
                outputConsole(txtCrawlingProcess, "**Failure** Retrieved something other than HTML");
            }
            
            
            // jika proses 1 url sudah dilakukan, tambahkan numb
            numb++;

        }
        catch(IOException ioe) {
            // Tidak berhasil request HTTP
            System.err.println(ioe.getMessage());
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BasdatCrawler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BasdatCrawler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BasdatCrawler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BasdatCrawler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BasdatCrawler().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDBUrlPath;
    private javax.swing.JButton btnFilePath;
    private javax.swing.JButton btnStartCrawl;
    private javax.swing.JFileChooser chooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPane;
    private javax.swing.JTextArea txtCrawlingProcess;
    private javax.swing.JTextField txtDBUrlPath;
    private javax.swing.JTextField txtFilePath;
    private javax.swing.JTextField txtLimit;
    private javax.swing.JTextField txtURL;
    // End of variables declaration//GEN-END:variables
}
